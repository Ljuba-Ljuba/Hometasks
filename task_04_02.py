'''
Напишите функцию http_headers_to_json, которая принимает два аргумента:
- путь к файлу с HTTP заголовками
- путь к файлу с результатами (в формате JSON)
Функция выполняет конвертирование HTTP-заголовков в формат JSON.
Ключами в JSON-объекте становятся имена заголовков, а значениями - значения заголовков.
Так же в JSON попадает дополнительная информация, в зависимости от вида заголовка.

HTTP-заголовки протокола версии 1.0/1.1 делятся на два вида: заголовки запроса и заголовки ответа.
В заголовках запроса первая строка имеет вид: "Метод URI Протокол/Версия" - GET / HTTP/1.1
В заголовках ответа первая строка имеет вид: "Протокол/версия Код Сообщение" - HTTP/1.1 200 OK
Со второй строки и до символов \n\n перечисляются сами заголовки со значениями.

Формат HTTP-заголовков следующий:
- заголовки отделяются друг от друга символом \n (переносом строки)
- имя заголовка и значение заголовка отделяются двоеточием

Если на входе файл с заголовком запроса, то в JSON файле должны быть ключи: "method", "uri", "protocol"
Если на входе файл с заголовком ответа, то в JSON файле должны быть ключи: "protocol", "status_code", "status_message"

(!) В выходном файле в значении заголовка не должно быть пробелов в начале и в конце строки

Подсказки:
1. Заголовки ответа всегда начинаются на "HTTP/", таким образом их легко отличить от заголовков запроса
2. В значениях заголовков может присутствовать двоеточие
3. Входной файл может заканчиваться переносом строки - \n (как в примерах)
4. В тестах не будет протокола HTTP2, где статусное сообщение было удалено из заголовков ответа.

Требуется реализовать только функцию, решение не должно осуществлять операций ввода-вывода.
Имя файла: task_04_02.py
Имя функции: http_headers_to_json
Тестовый набор данных №1:
Входной файл: headers-1.txt
Выходной файл: results-1.json
Тестовый набор данных №2:
Входной файл: headers-2.txt
Выходной файл: results-2.json
'''
import json

def http_headers_to_json(path_in,path_out):

    result={}
    with open(path_in,'r') as in_1:

        if in_1.read(3) == "HTT":
            in_1.seek(0)
            line_1 = in_1.readline()
            line_1 = line_1.strip('\n')
            line_1 = line_1.split(" ")
            result = {
                "protocol":line_1[0],
                "status_code":line_1[1],
                "status_message":line_1[2]
                }

            for lines in in_1:

                if len(lines) > 1:
                    lines = lines.strip('\n')
                    lines = lines.split(': ')
                    result[lines[0]]=lines[1]


        else:
            in_1.seek(0)
            line_1 = in_1.readline()
            line_1 = line_1.strip('\n')
            line_1 = line_1.split(" ")
            result = {
                "method":line_1[0],
                "uri":line_1[1],
                "protocol":line_1[2]
                }
            for lines in in_1:

                if len(lines) > 1:
                    lines = lines.strip('\n')
                    lines = lines.split(': ')
                    result[lines[0]]=lines[1]


        with open(path_out, 'w') as out_1:
                json.dump(result, out_1)
